<?php

require_once realpath(dirname(__FILE__) . '/../..') . '/enviroment.php';

doLogin();

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-06-27 at 13:30:04.
 */
class Wishlist_modelTest extends PHPUnit_Framework_TestCase {

    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Wishlist_model();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    /**
     * @covers Wishlist_model::getSettings
     */
    public function testGetSettings() {
        $this->assertNotNull($this->object->getSettings(), 'Cant get Settings');
        $this->assertArrayHasKey('maxListName', $this->object->getSettings());
        $this->assertArrayHasKey('maxListsCount', $this->object->getSettings());
        $this->assertArrayHasKey('maxItemsCount', $this->object->getSettings());
        $this->assertArrayHasKey('maxCommentLenght', $this->object->getSettings());
        $this->assertArrayHasKey('maxDescLenght', $this->object->getSettings());
        $this->assertArrayHasKey('maxImageWidth', $this->object->getSettings());
        $this->assertArrayHasKey('maxImageHeight', $this->object->getSettings());
        $this->assertArrayHasKey('maxImageSize', $this->object->getSettings());
    }

    /**
     * @covers Wishlist_model::setSettings
     */
    public function testSetSettings() {
        $settings =
                array(
                    'maxListName' => 254,
                    'maxListsCount' => 10,
                    'maxItemsCount' => 100,
                    'maxCommentLenght' => 500,
                    'maxDescLenght' => 1000,
                    'maxImageWidth' => 150,
                    'maxImageSize' => 2000000,
                    'maxImageHeight' => 150);
        $this->assertTrue($this->object->setSettings($settings), 'Cant Set Settings');
    }

    /**
     * @covers Wishlist_model::getWishLists
     */
    public function testGetWishLists() {
        $this->assertInternalType('array', $this->object->getWishLists());
    }

    /**
     * @covers Wishlist_model::getAllUsers
     */
    public function testGetAllUsers() {
        $this->assertInternalType('array', $this->object->getAllUsers());
    }

    /**
     * @covers Wishlist_model::getUserByID
     */
    public function testGetUserByID() {
        $this->assertInternalType('array', $this->object->getUserByID($GLOBALS['userId']));
    }

    /**
     * @covers Wishlist_model::getWLsByUserId
     */
    public function testGetWLsByUserId() {
        $this->assertInternalType('array', $this->object->getWLsByUserId($GLOBALS['userId'], array('public', 'shared', 'private')));
    }

    /**
     * @covers Wishlist_model::createWishList
     */
    public function testCreateWishList() {
        $this->assertTrue($this->object->createWishList('test', $GLOBALS['userId'], 'shared'));
        $id = $this->object->db->insert_id();
        return $id;
    }

    /**
     * @covers Wishlist_model::addItem
     * @todo   Implement testAddItem().
     */
    public function testAddItem() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Wishlist_model::getUserWishList
     */
    public function testGetUserWishList() {
        $wishlist = new \wishlist\classes\ParentWishlist();
        $wishlist->createWishList($GLOBALS['userId'], 'test');
        $id = $this->object->db->insert_id();
        $this->assertInternalType('array', $this->object->getUserWishList($GLOBALS['userId'], $id, array('public', 'shared', 'private')));
//        $wishlist->deleteWL($id);
        return $id;
    }

    /**
     * @covers Wishlist_model::upateWishList
     * @depends testGetUserWishList
     */
    public function testUpateWishList($id) {
        $this->assertFalse($this->object->upateWishList($id, array()));
    }

    /**
     * @covers Wishlist_model::getUserWishListByHash
     * @depends testGetUserWishList
     */
    public function testGetUserWishListByHash($id) {
        $hash = $this->object->db
                        ->where('id', $id)
                        ->get('mod_wish_list')
                        ->row()->hash;
        $this->assertInternalType('array', $this->object->GetUserWishListByHash($hash, array('public', 'shared', 'private')));
    }

    /**
     * @covers Wishlist_model::deleteItem
     * @depends testCreateWishList
     */
    public function testDeleteItem($id) {
        $this->assertTrue($this->object->deleteItem('1031', $id));
    }

    /**
     * @covers Wishlist_model::deleteItemsByIDs
     */
    public function testDeleteItemsByIDs() {
        $this->assertTrue($this->object->deleteItemsByIDs('1031'));
    }

    /**
     * @covers Wishlist_model::getUserWishListsByID
     */
    public function testGetUserWishListsByID() {
        $this->assertInternalType('array', $this->object->getUserWishListsByID($GLOBALS['userId'], array('public', 'shared', 'private')));
    }

    /**
     * @covers Wishlist_model::delWishListById
     * @depends testCreateWishList
     */
    public function testDelWishListById($id) {
        $this->assertTrue($this->object->delWishListById($id));
    }

    /**
     * @covers Wishlist_model::delWishListProductsByWLId
     * @depends testCreateWishList
     */
    public function testDelWishListProductsByWLId($id) {
        $this->assertTrue($this->object->delWishListProductsByWLId($id));
    }

    /**
     * @covers Wishlist_model::getUserWishProducts
     * @depends testCreateWishList
     */
    public function testGetUserWishProducts() {
        $this->assertInternalType('array', $this->object->getUserWishProducts($GLOBALS['userId']));
    }

    /**
     * @covers Wishlist_model::getAllUserWLs
     * @depends testCreateWishList
     */
    public function testGetAllUserWLs() {
        $this->assertInternalType('array', $this->object->getAllUserWLs($GLOBALS['userId']));
    }

    /**
     * @covers Wishlist_model::getMostPopularProducts
     */
    public function testGetMostPopularProducts() {
        $this->assertInternalType('array', $this->object->getMostPopularProducts());
    }

    /**
     * @covers Wishlist_model::insertWishList
     */
    public function testInsertWishList() {
        $this->assertTrue($this->object->insertWishList('test', 'shared', $GLOBALS['userId']));
    }

    /**
     * @covers Wishlist_model::upateWishListItemsComments
     * @depends testCreateWishList
     */
    public function testUpateWishListItemsComments($id) {
        $this->assertFalse($this->object->insertWishList($id, array()));
    }

    /**
     * @covers Wishlist_model::insertUser
     */
    public function testInsertUser() {
        $this->assertTrue($this->object->insertUser(999999, '', '', 'test'));
    }

    /**
     * @covers Wishlist_model::createUserIfNotExist
     * @todo   Implement testCreateUserIfNotExist().
     */
    public function testCreateUserIfNotExist() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Wishlist_model::updateUser
     * @todo   Implement testUpdateUser().
     */
    public function testUpdateUser() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Wishlist_model::getUserWishListCount
     * @todo   Implement testGetUserWishListCount().
     */
    public function testGetUserWishListCount() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Wishlist_model::getUserWishListItemsCount
     * @todo   Implement testGetUserWishListItemsCount().
     */
    public function testGetUserWishListItemsCount() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Wishlist_model::addReview
     * @todo   Implement testAddReview().
     */
    public function testAddReview() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Wishlist_model::getMostViewedWishLists
     * @todo   Implement testGetMostViewedWishLists().
     */
    public function testGetMostViewedWishLists() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Wishlist_model::setUserImage
     * @todo   Implement testSetUserImage().
     */
    public function testSetUserImage() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Wishlist_model::install
     * @todo   Implement testInstall().
     */
    public function testInstall() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Wishlist_model::deinstall
     * @todo   Implement testDeinstall().
     */
    public function testDeinstall() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}
