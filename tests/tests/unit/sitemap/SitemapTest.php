<?php

require_once realpath(dirname(__FILE__) . '/../../..') . '/enviroment.php';

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-02-11 at 10:32:18.
 */
class SitemapTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Sitemap
     */
    protected $object;

    /**
     * CodeIgniter object
     * @var type 
     */
    protected $ci;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Sitemap();
        $this->ci = & get_instance();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers Sitemap::index
     */
    public function testIndex() {
        $this->object->index();

        // Check if rendered template contains site map
        $this->expectOutputRegex('/id="sitemap"/');
    }

    /**
     * @covers Sitemap::setUpdatedUrl
     */
    public function testSetUpdatedUrl() {
        // Check on return False when not valid parameter
        $result = $this->object->setUpdatedUrl();

        $this->assertFalse($result);

        // Check on return False when not valid parameter
        $result = $this->object->setUpdatedUrl(array());

        $this->assertFalse($result);

        // Check on return True when valid parameter
        $result = $this->object->setUpdatedUrl(array('url' => 'shop/product/1'));

        $this->assertTrue($result);

        // Check on True when seted url equals with parameter value
        $ci = & get_instance();

        $this->assertTrue($ci->updated_url == 'shop/product/1');
    }

    /**
     * @covers Sitemap::initialize
     */
    public function testInitialize() {
        $result = $this->object->initialize();

        // Check returned instanse 
        $this->assertInstanceOf(Sitemap, $result);

        // Check setted values
        $this->assertNotEmpty($result->main_page_changefreq);
        $this->assertNotEmpty($result->main_page_priority);
    }

    /**
     * @covers Sitemap::sitemap_ul
     */
    public function testSitemap_ul() {
        $result = $this->object->sitemap_ul();

        // Check not empty result
        $this->assertNotEmpty($result);

        // Check valid return string
        $this->assertRegExp('/id="sitemap"/', $result);

        // Get categories data for test
        $categories = $this->ci->lib_category->_build();

        $result_categories = $this->object->sitemap_ul($categories);

        // Check correct result
        if (count($categories) > 0) {
            $this->assertRegExp('/id="sitemap"/', $result_categories);
            $this->assertGreaterThan(strlen($result), strlen($result_categories));
        }
    }

    /**
     * @covers Sitemap::build_xml_map
     */
    public function testBuild_xml_map() {
        $result = $this->object->build_xml_map();

        // Check if rendered template contains site map
        $this->expectOutputRegex('/<\?xml version="1.0" encoding="UTF-8"\?>/');
    }

    /**
     * @covers Sitemap::_create_map
     */
    public function test_create_map() {
        $result = $this->object->_create_map();

        // Check valid return string
        $this->assertRegExp('/<\?xml version="1.0" encoding="UTF-8"\?>/', $result);

        // Create xml document from returned xml string
        $actual = new DOMDocument();
        $actual->loadXML($result);

        // Check contains valid first child tag name
        $this->assertEquals('urlset', $actual->firstChild->tagName);
    }

    /**
     * @covers Sitemap::replace
     */
    public function testReplace() {
        $result = $this->object->replace();

        $this->assertFalse($result);
    }

    /**
     * @covers Sitemap::robotsCheck
     */
    public function testRobotsCheck() {
        $result = $this->object->robotsCheck();

        // Check on False when no parameters
        $this->assertFalse($result);

        $result = $this->object->robotsCheck('fake/url');

        // Check on False
        $this->assertFalse($result);
    }

    /**
     * @covers Sitemap::ping_google
     */
    public function testPing_google() {
        // Update settings with assepted values to send ping
        $data = array(
            'robotsStatus' => 0,
            'generateXML' => 1,
            'sendSiteMap' => 1,
            'lastSend' => 0,
            'sendWhenUrlChanged' => 0
        );

        // Update sitemap settings
        $this->ci->db->limit(1);
        $this->ci->db->where('name', 'sitemap');
        $this->ci->db->update('components', array('settings' => serialize($data)));
        $result = $this->object->ping_google();

        $this->assertEquals(200, $result);

        // Update settings with not assepted values to send ping(time is not higher 1 hour from last ping sending)
        $data = array(
            'robotsStatus' => 0,
            'generateXML' => 1,
            'sendSiteMap' => 1,
            'lastSend' => time(),
            'sendWhenUrlChanged' => 0
        );

        // Update sitemap settings
        $this->ci->db->limit(1);
        $this->ci->db->where('name', 'sitemap');
        $this->ci->db->update('components', array('settings' => serialize($data)));
        $result = $this->object->ping_google();

        // Check on False
        $this->assertFalse($result);

        // Update settings with not assepted values to send ping( sendSiteMap is turned off)
        $data = array(
            'robotsStatus' => 0,
            'generateXML' => 1,
            'sendSiteMap' => 0,
            'lastSend' => 0,
            'sendWhenUrlChanged' => 0
        );

        // Update sitemap settings
        $this->ci->db->limit(1);
        $this->ci->db->where('name', 'sitemap');
        $this->ci->db->update('components', array('settings' => serialize($data)));
        $result = $this->object->ping_google();

        // Check on False
        $this->assertFalse($result);

        // Update settings with not assepted values to send ping( sendWhenUrlChanged is turned on)
        $data = array(
            'robotsStatus' => 0,
            'generateXML' => 1,
            'sendSiteMap' => 0,
            'lastSend' => 0,
            'sendWhenUrlChanged' => 1
        );

        // Update sitemap settings
        $this->ci->db->limit(1);
        $this->ci->db->where('name', 'sitemap');
        $this->ci->db->update('components', array('settings' => serialize($data)));
        $result = $this->object->ping_google();

        // Check on False
        $this->assertFalse($result);
    }

    /**
     * @covers Sitemap::gzip
     */
    public function testGzip() {
        $result = $this->object->gzip();

        // Check return value 
        $this->assertEquals(NULL, $result);

        // Check valid returnd value
        $this->expectOutputRegex('/<urlset xmlns=/');
    }

}

