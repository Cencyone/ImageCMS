<?php

namespace template_manager\classes;

require_once realpath(dirname(__FILE__) . '/../../../..') . '/enviroment.php';

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-04-09 at 16:39:07.
 */
class TemplateManagerTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var TemplateManager
     */
    protected $object;

    /**
     * Name of current setted template
     * @var string
     */
    protected $siteTemplateName;

    protected function setUp() {
        $this->siteTemplateName = \CI::$APP->db
                        ->get('settings')
                        ->row()->site_template;

        $this->assertRegExp('/^[А-Яа-яa-zA-Z0-9\-\_]{2,50}$/', $this->siteTemplateName, 'Something wrong with getting current site template');
        $this->object = TemplateManager::getInstance();
    }

    protected function tearDown() {
        
    }

    /**
     * @covers template_manager\classes\TemplateManager::getInstance
     */
    public function testGetInstance() {
        $this->assertInstanceOf('\template_manager\classes\TemplateManager', TemplateManager::getInstance());
    }

    /**
     * @covers template_manager\classes\TemplateManager::setTemplate
     */
    public function testSetTemplate() {
        $templates = $this->object->listLocal();
        if (!is_array($templates) || count($templates) == 0) {
            $this->markTestIncomplete('Something wrong - no templates for testing');
        }
        // trying to set some else template (not the one is installed)
        $templateToSet = NULL;
        foreach ($templates as $template) {
            if ($template->isValid() !== TRUE) {
                $this->markTestIncomplete('Here shoud\'t be broken templates');
            }
            if ($template->name != $this->siteTemplateName) {
                $templateToSet = $template;
                break;
            }
        }

        if (is_null($templateToSet)) {
            $this->markTestIncomplete('No templates to test');
        }

        echo 'Current tempalte is ' . $this->siteTemplateName . PHP_EOL;

        echo 'Trying to set same template' . PHP_EOL;
        try {
            $this->object->setTemplate(new Template($this->siteTemplateName));
            $this->fail('Current site template can not be setted again, but the operation was success');
        } catch (\Exception $e) {
            echo 'All good - unable to set current template' . PHP_EOL;
        }

        echo 'Setting template ' . $templateToSet->name . PHP_EOL;
        $this->object->setTemplate($templateToSet);

        $currentTemplate = \CI::$APP->db->get('settings')->row()->site_template;

        $this->assertTrue($currentTemplate != $this->siteTemplateName);
        echo 'Tempalte changed';
        echo PHP_EOL;

        $template = new Template($this->siteTemplateName);
        $this->object->setTemplate($template);
        echo 'Previous template was set back';
        echo PHP_EOL;
        echo PHP_EOL;
    }

    /**
     * @covers template_manager\classes\TemplateManager::getCurentTemplate
     */
    public function testGetCurentTemplate() {
        $currentTemplate = $this->object->getCurentTemplate();
        $this->assertInstanceOf('template_manager\classes\Template', $currentTemplate);
        $this->assertEquals($this->siteTemplateName, $currentTemplate->name);
    }

    /**
     * @covers template_manager\classes\TemplateManager::listLocal
     */
    public function testListLocal() {
        $list = $this->object->listLocal(FALSE);
        $this->assertInternalType('array', $list);
        $this->assertTrue(count($list) > 0, 'No templates - can\'t be');
        foreach ($list as $template) {
            $this->assertInstanceOf('template_manager\classes\Template', $template);
            echo $template->name;
            echo " - ";
            if ($template->isValid() == FALSE) {
                echo 'broken (';
                $errors = $template->getErrors();
                $errorsString = '';
                foreach ($errors as $error) {
                    $errorsString .= $error . ' ,';
                }
                echo rtrim($errorsString, ', ');
                echo ');';
            } else {
                echo "valid;";
            }
            echo PHP_EOL;
        }
    }

    /**
     * @covers template_manager\classes\TemplateManager::listRemote
     */
    public function testListRemote() {
        $testXmlPath = UNIT_TESTS_PATH . 'template_manager/temp/remote_list_example_corporate.xml';
        $result = $this->object->listRemote($testXmlPath);
        $this->assertInternalType('array', $result);
        $this->assertArrayHasKey('CategoryName', $result);
        $this->assertArrayHasKey('Template', $result);
        $this->assertArrayHasKey(0, $result['Template']);
    }

}
