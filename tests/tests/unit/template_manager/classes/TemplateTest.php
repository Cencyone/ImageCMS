<?php

namespace template_manager\classes;

require_once realpath(dirname(__FILE__) . '/../../../..') . '/enviroment.php';

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-04-09 at 16:39:03.
 */
class TemplateTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Template
     */
    protected $object;

    /**
     * Template name wich is using in tests
     * @var string
     */
    protected $testedTempalateName = 'newLevel_TM';

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Template($this->testedTempalateName);

        $this->assertEquals('New Level TM', $this->object->label);
        $this->assertEquals('/templates/newLevel/screenshot.png', $this->object->mainImage);
        $this->assertEquals('newLevel_TM', $this->object->name);
        $this->assertInternalType('array', $this->object->screenshots);
        $this->assertEquals('shop', $this->object->type);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers template_manager\classes\Template::isValid
     */
    public function testIsValid() {
        $this->assertTrue($this->object->isValid(), 'Tested template must be valid from start');
        $tPath = TEMPLATES_PATH . $this->testedTempalateName;
        $renameStatus = rename($tPath . '/params.xml', $tPath . '/params1.xml');

        echo 'Trying to make template not valid, and test if valid will be false' . PHP_EOL;

        if ($renameStatus != TRUE) {
            $this->fail('Unable to rename params.xml file to test valid-checker');
        }

        $notValidTemplate = new Template($this->testedTempalateName);
        if ($notValidTemplate->isValid() != TRUE) {
            echo 'All good - template is not valid. Errors: ';
            $errorsString = '';
            $errors = $notValidTemplate->getErrors();
            foreach ($errors as $error) {
                $errorsString .= $error . ' ,';
            }
            echo rtrim($errorsString, ', ');
            echo PHP_EOL;
        } else {
            $this->fail('This template must be broken, but it is valid!');
        }

        rename($tPath . '/params1.xml', $tPath . '/params.xml');
    }

    /**
     * @covers template_manager\classes\Template::getComponents
     */
    public function testGetComponent() {
        $this->assertTrue(true);
    }

    /**
     * @covers template_manager\classes\Template::getComponents
     */
    public function testGetComponents() {
        $coreComponents = $this->object->getComponents(Template::COMPONENTS_CORE);
        $this->assertArrayHasKey('TTemplateEditor', $coreComponents);
        $this->assertArrayNotHasKey('TColorScheme', $coreComponents);
        $this->assertArrayNotHasKey('TOpi', $coreComponents);

        $templateComponents = $this->object->getComponents(Template::COMPONENTS_TEMPLATE);

        $this->assertArrayHasKey('TColorScheme', $templateComponents);
        $this->assertArrayNotHasKey('TTemplateEditor', $templateComponents);

        $allComponents = $this->object->getComponents();

        $this->assertArrayHasKey('TColorScheme', $allComponents);
        $this->assertArrayHasKey('TTemplateEditor', $allComponents);
        $this->assertArrayHasKey('TOpi', $allComponents);
        $this->assertArrayHasKey('TProperties', $allComponents);
        $this->assertInstanceOf('TColorScheme', $allComponents['TColorScheme']);
    }

}
