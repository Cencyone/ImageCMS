<?php

require_once realpath(dirname(__FILE__) . '/../../../../..') . '/enviroment.php';
require_once realpath(dirname(__FILE__) . '/../../../../../..') . '/application/modules/template_manager/components/TTemplateEditor/TTemplateEditor.php';

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-04-09 at 18:20:14.
 */
class TTemplateEditorTest extends \PHPUnit_Framework_TestCase {

    /**
     * TTemplateEditor instance
     * @var TTemplateEditor
     */
    protected $object;

    /**
     * Test params array for TTemplateEditor
     * @var type 
     */
    protected $testParamsData;

    /**
     * Test update params array for TTemplateEditor
     * @var type 
     */
    protected $testParamsDataUpdate;

    /**
     * Codeigniter object
     * @var type 
     */
    protected $ci;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new TTemplateEditor();

        $lang = new \MY_Lang();
        $lang->load('template_manager');

        $this->testParamsData = array('paramKey' => 'paramData', 'paramKey2' => 'paramData2');
        $this->testParamsDataUpdate = array('paramKey' => 'paramDataUpdated', 'paramKey2' => 'paramDataUpdated2');

        $this->ci = & get_instance();
        $this->ci->db->where('component', get_class($this->object))->delete('template_settings');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers TTemplateEditor::setParamsXml
     * @todo   Implement testSetParamsXml().
     */
    public function testSetParamsXml() {
        $this->assertFalse($this->object->setParamsXml());
    }

    /**
     * @covers TTemplateEditor::getLabel
     * @todo   Implement testGetLabel().
     */
    public function testGetLabel() {
        $result = $this->object->getLabel();
        $this->assertEquals(lang('Template Editor', 'template_manager'), $result);
        $this->assertTrue(is_string($result));
    }

    /**
     * @covers TTemplateEditor::getType
     * @todo   Implement testGetType().
     */
    public function testGetType() {
        $result = $this->object->getType();
        $this->assertEquals(get_class($this->object), $result);
        $this->assertTrue(is_string($result));
    }

    /**
     * @covers TTemplateEditor::renderAdmin
     * @todo   Implement testRenderAdmin().
     */
    public function testRenderAdmin() {
        $this->object->renderAdmin();
        $this->expectOutputRegex('/id="elFinderTPLEd"/');
    }

    /**
     * @covers TComponent::setParams
     */
    public function testSetParams() {
        $this->object->setParams($this->testParamsData);

        /**
         * Get components settings for TTemplateEditor from DB
         */
        $component_params = $this->ci->db
                ->where('component', get_class($this->object))
                ->get('template_settings');

        if ($component_params) {
            $component_params = $component_params->result_array();
            foreach ($component_params as $param) {
                //Check contains corect values
                $this->assertContains($param['data'], $this->testParamsData);

                //Check contains corect keys
                $this->assertArrayHasKey($param['key'], $this->testParamsData);
            }
        } else {
            // Mark incompplete if DB result is empty
            $this->markTestIncomplete('Error set params into DB');
        }
    }

    /**
     * @covers TComponent::getParam
     */
    public function testGetParam() {
        $this->object->setParams($this->testParamsData);

        /**
         * Test corect getting params
         */
        $result = $this->object->getParam();
        $this->assertEquals($result, $this->testParamsData);

        /**
         * Test corect getting params by key
         */
        reset($this->testParamsData);
        $firstKey = key($this->testParamsData);

        $result = $this->object->getParam($firstKey);
        $this->assertEquals($result, $this->testParamsData[$firstKey]);

        /**
         * Test corect corect answer when params key not exists
         */
        $result = $this->object->getParam('notExistingKey');
        $this->assertNull($result);
    }

    /**
     * @covers TComponent::updateParams
     */
    public function testUpdateParams() {
        // Test update params on failure
        $result = $this->object->updateParams();
        $this->assertFalse($result);

        $result = $this->object->updateParams($this->testParamsDataUpdate);
        $this->assertTrue($result);


        /**
         * Get components settings for TTemplateEditor from DB
         */
        $component_param = $this->ci->db
                ->where('component', get_class($this->object))
                ->get('template_settings');

        if ($component_param) {
            $component_param = $component_param->result_array();
            foreach ($component_param as $param) {
                //Check contains corect values
                $this->assertContains($param['data'], $this->testParamsDataUpdate);

                //Check contains corect keys
                $this->assertArrayHasKey($param['key'], $this->testParamsDataUpdate);
            }
        } else {
            // Mark incompplete if DB result is empty
            $this->markTestIncomplete('Error set params into DB');
        }

        /**
         * Test updating settings for one param
         */
        reset($this->testParamsDataUpdate);
        $firstKey = key($this->testParamsDataUpdate);

        // Array with one param to update
        $firstKeyArray = array($firstKey => 'testUpdateOneParam');
        $result = $this->object->updateParams($firstKeyArray);
        $this->assertTrue($result);

        /**
         * Get components settings for TTemplateEditor from DB
         */
        $component_param = $this->ci->db
                ->where('component', get_class($this->object))
                ->where('key', $firstKey)
                ->get('template_settings');

        if ($component_param) {
            $component_param = $component_param->row_array();
            //Check contains corect values
            $this->assertContains($component_param['data'], $firstKeyArray);

            //Check contains corect keys
            $this->assertArrayHasKey($component_param['key'], $firstKeyArray);
        } else {
            // Mark incompplete if DB result is empty
            $this->markTestIncomplete('Error set params into DB');
        }
    }

}
