<?php

namespace template_manager\installer;

require_once realpath(dirname(__FILE__) . '/../../../..') . '/enviroment.php';

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-04-10 at 17:55:37.
 */
class ModuleDependenceTest extends \PHPUnit_Framework_TestCase {

    /**
     * Module reguired object
     * @var ModuleDependence
     */
    protected $objectRequiredModule;

    /**
     * Module wishful object
     * @var ModuleDependence 
     */
    protected $objectWishfulModule;

    /**
     * Module add html object
     * @var ModuleDependence 
     */
    protected $objectAddModule;

    /**
     * Module add html object
     * @var ModuleDependence 
     */
    protected $objectAddNotExistingModule;

    /**
     * Codeigniter object
     * @var type 
     */
    protected $ci;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->ci = & get_instance();

        /**
         * Prepare required module object
         */
        $xml = '<dependency entityName="module" name="moduleName1" type="required"/>';

        $xmlObject = simplexml_load_string($xml);
        $this->objectRequiredModule = new ModuleDependence($xmlObject);

        /**
         * Prepare wishful Module object
         */
        $xml = '<dependency entityName="module" name="moduleName2" type="wishful"/>';

        $xmlObject = simplexml_load_string($xml);
        $this->objectWishfulModule = new ModuleDependence($xmlObject);

        /**
         * Prepare add module object
         */
        $translator = $this->ci->db->where('name', 'translator')->get('components');
        if ($translator) {
            $this->ci->db->where('name', 'translator')->delete('components');
        }

        $xml = '<dependency entityName="module" name="translator" type="add"/>';

        $xmlObject = simplexml_load_string($xml);
        $this->objectAddModule = new ModuleDependence($xmlObject);


        /**
         * Prepare add not existing module object
         */
        $xml = '<dependency entityName="module" name="notExistingModule" type="add"/>';

        $xmlObject = simplexml_load_string($xml);
        $this->objectAddNotExistingModule = new ModuleDependence($xmlObject);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers template_manager\installer\ModuleDependence::verify
     * @todo   Implement testVerify().
     */
    public function testVerify() {
        /**
         * Test required Module
         */
        $result = $this->objectRequiredModule->verify();
        $this->assertFalse($result);

        $messages = $this->objectRequiredModule->getMessages();
        $this->assertTrue(is_array($messages));
        $this->assertNotEmpty($messages);
        $this->assertCount(1, $messages);
        $this->assertInternalType('string', $messages[0]);

        /**
         * Test wishful Module
         */
        $result = $this->objectWishfulModule->verify();
        $this->assertFalse($result);

        $messages = $this->objectWishfulModule->getMessages();
        $this->assertTrue(is_array($messages));
        $this->assertNotEmpty($messages);
        $this->assertCount(1, $messages);
        $this->assertInternalType('string', $messages[0]);

        /**
         * Test add Module
         */
        $result = $this->objectAddModule->verify();
        $this->assertTrue($result);

        $messages = $this->objectAddModule->getMessages();
        $this->assertFalse($messages);

        /**
         * Test add not existing Module
         */
        $result = $this->objectAddNotExistingModule->verify();
        $this->assertFalse($result);

        $messages = $this->objectAddNotExistingModule->getMessages();
        $this->assertTrue(is_array($messages));
        $this->assertNotEmpty($messages);
        $this->assertCount(1, $messages);
        $this->assertInternalType('string', $messages[0]);
    }

}

