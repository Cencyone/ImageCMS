<?php

namespace template_manager\installer;

require_once realpath(dirname(__FILE__) . '/../../../..') . '/enviroment.php';

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-04-10 at 17:03:14.
 */
class WidgetDependenceTest extends \PHPUnit_Framework_TestCase {

    /**
     * Widget reguired object
     * @var WidgetDependence
     */
    protected $objectRequiredWidget;
    
    /**
     * Widget wishful object
     * @var WidgetDependence 
     */
    protected $objectWishfulWidget;
    
    /**
     * Widget add html object
     * @var WidgetDependence 
     */
    protected $objectAddHTMLWidget;
    
    /**
     * Widget add module object
     * @var WidgetDependence 
     */
    protected $objectAddModuleWidget;
    
    /**
     * Codeigniter object
     * @var type 
     */
    protected $ci;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->ci = & get_instance();
        
        /**
         * Prepare required widget object
         */
        $xml = '<dependency entityName="widget" name="widgetName1" type="required"/>';

        $xmlObject = simplexml_load_string($xml);
        $this->objectRequiredWidget = new WidgetDependence($xmlObject);

        /**
         * Prepare wishful widget object
         */
        $xml = '<dependency entityName="widget" name="widgetName1" type="wishful"/>';

        $xmlObject = simplexml_load_string($xml);
        $this->objectWishfulWidget = new WidgetDependence($xmlObject);
        
        /**
         * Prepare html add widget object
         */
        $xml = '
            <dependency entityName="widget" name="addHTMLWidgetName" type="add" widgetType="html">
                <data>
                    <div>WidgetText</div>
                </data>
            </dependency>';

        $xmlObject = simplexml_load_string($xml);
        $this->objectAddHTMLWidget = new WidgetDependence($xmlObject);

        /**
         * Prepare module add widget object
         */
        $xml = '
            <dependency entityName="widget" name="addModuleWidgetName" type="add" widgetType="module" module="widgetModule" method="methodName" description="widget description">
                <settings>
                    <setting1>1</setting1>
                    <setting2>2</setting2>
                    <setting3>3</setting3>
                </settings>
            </dependency>';

        $xmlObject = simplexml_load_string($xml);
        $this->objectAddModuleWidget = new WidgetDependence($xmlObject);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers WidgetDependence::verify
     */
    public function testVerify() {
        /**
         * Test required widget
         */
        $result = $this->objectRequiredWidget->verify();
        $this->assertFalse($result);

        $messages = $this->objectRequiredWidget->getMessages();
        $this->assertTrue(is_array($messages));
        $this->assertNotEmpty($messages);
        $this->assertCount(1, $messages);
        $this->assertInternalType('string', $messages[0]);

        /**
         * Test wishful widget
         */
        $result = $this->objectWishfulWidget->verify();
        $this->assertFalse($result);

        $messages = $this->objectWishfulWidget->getMessages();
        $this->assertTrue(is_array($messages));
        $this->assertNotEmpty($messages);
        $this->assertCount(1, $messages);
        $this->assertInternalType('string', $messages[0]);

        /**
         * Test add html widget
         */
        $result = $this->objectAddHTMLWidget->verify();
        $this->assertTrue($result);
                
        $messages = $this->objectAddHTMLWidget->getMessages();
        $this->assertFalse($messages);
        
         /**
         * Test add module widget
         */
        $result = $this->objectAddModuleWidget->verify();
        $this->assertTrue($result);
                
        $messages = $this->objectAddModuleWidget->getMessages();
        $this->assertFalse($messages);
          
        $this->ci->db->where_in('name', array('addHTMLWidget', 'addModuleWidget'))->delete('widgets');
    }

}
