<?php

namespace Cart;

require_once realpath(dirname(__FILE__) . '/../../..') . '/enviroment.php';

doLogin();

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-13 at 10:59:19.
 */
class BaseCartTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var BaseCart
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = \Cart\BaseCart::getInstance();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }
    
    /**
     * @covers Cart\BaseCart::addItem
     * @todo   Implement testAddItem().
     */
    public function testAddItem() {
       /* check add items to cart */
       $result = $this->object->addItem(array('instance' => 'SProducts', 'id' => 13381, 'quantity' => 1)); 
       $this->assertTrue($result['success']); 
       //$this->assertArrayHasKey('errors', $result); 
       /* 
       $result = $this->object->addItem(array('instance' => 'SProducts', 'id' => 13381, 'quantity' => 1)); 
       $this->assertTrue($result['success']);
       $this->assertArrayHasKey('errors', $result);
       */
       
       $result = $this->object->addItem(array('instance' => 'ShopKit', 'id' => 1, 'quantity' => 1));
       $this->assertTrue($result['success']);
       
    }
    

    /**
     * @covers Cart\BaseCart::setQuantity
     * @todo   Implement testSetQuantity().
     */
    public function testSetQuantity() {
        
        $result = $this->object->setQuantity(array('instance' => 'SProducts', 'id' => 13381),1);
        //$this->assertArrayHasKey('errors', $result); 
        $this->assertTrue($result['setquan']);
        
        $result = $this->object->setQuantity(array('instance' => 'ShopKit', 'id' => 1),1);
        $this->assertArrayHasKey('setquan', $result); 
        $this->assertTrue($result['setquan']);
    }

    /**
     * @covers Cart\BaseCart::setItemPrice
     * @todo   Implement testSetItemPrice().
     */
    public function testSetItemPrice() {
        
        $result = $this->object->setItemPrice(array('instance' => 'SProducts', 'id' => 13381),500);
        $this->assertArrayHasKey('setprice', $result); 
        $this->assertTrue($result['setprice']); 
        
        $result = $this->object->setItemPrice(array('instance' => 'ShopKit', 'id' => 1),100);
        $this->assertArrayHasKey('setprice', $result); 
        $this->assertTrue($result['setprice']); 
    }

    /**
     * @covers Cart\BaseCart::removeItem
     * @todo   Implement testRemoveItem().
     */
    public function testRemoveItem() {
        
        $result = $this->object->removeItem(array('instance' => 'SProducts', 'id' => 13381));
        $this->assertArrayHasKey('delete', $result); 
        $this->assertTrue($result['delete']); 
    }

    /**
     * @covers Cart\BaseCart::getTotalItems
     * @todo   Implement testGetTotalItems().
     */
    public function testGetTotalItems() {
        
        $this->assertEquals(1, $this->object->getTotalItems());
    }

    /**
     * @covers Cart\BaseCart::getTotalPrice
     * @todo   Implement testGetTotalPrice().
     */
    public function testGetTotalPrice() {
        
        $this->assertEquals(100, $this->object->getTotalPrice());
        
    }

    /**
     * @covers Cart\BaseCart::getOriginTotalPrice
     * @todo   Implement testGetOriginTotalPrice().
     */
    public function testGetOriginTotalPrice() {
        
        $this->assertEquals(53776.90, $this->object->getOriginTotalPrice());
    }

    /**
     * @covers Cart\BaseCart::getItem
     * @todo   Implement testGetItem().
     */
    public function testGetItem() {
        
        $result = $this->object->getItem(array('instance' => 'ShopKit', 'id' => 1));
        $this->assertArrayHasKey('data', $result);
        $this->assertEquals(1, $result['data']->id);
    }

    /**
     * @covers Cart\BaseCart::getItems
     * @todo   Implement testGetItems().
     */
    public function testGetItems() {
        
        $result = $this->object->getItems();
        $this->assertArrayHasKey('data', $result);
        $this->assertEquals(1, $result['data'][0]->id);
        
    }
    
    /**
     * @covers Cart\BaseCart::removeAll
     * @todo   Implement testRemoveAll().
     */
    public function testRemoveAll() {
        
       $result = $this->object->removeAll();
       $this->assertTrue($result['delete']); 
    }





}
