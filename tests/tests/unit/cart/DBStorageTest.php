<?php

namespace Cart;

require_once realpath(dirname(__FILE__) . '/../../..') . '/enviroment.php';
doLogin();

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-13 at 13:18:12.
 */
class DBStorageTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var DBStorage
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new DBStorage;
        $this->object->setData(NULL);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers Cart\DBStorage::getData
     * @todo   Implement testGetData().
     */
    public function testGetData() {

        $result = (boolean) $this->object->getData();
        $this->assertFalse($result);

        $result = (boolean) $this->object->getData('SProducts', 82);
        $this->assertFalse($result);

        $result = (boolean) $this->object->getData('ShopKit', 16);
        $this->assertFalse($result);

        $result = (boolean) $this->object->getData(1, 82);
        $this->assertFalse($result);

        $result = (boolean) $this->object->getData(2, 16);
        $this->assertFalse($result);

        /** Sproduct array * */
        $data["SProducts_71_82"] = array(
            'instance' => 'SProducts',
            'id' => 82,
            'quantity' => 5
        );

        /** Save to storage * */
        $this->object->setData($data);

        $result = (boolean) $this->object->getData('SProducts', 82);
        $this->assertTrue($result);

        $result = (boolean) $this->object->getData(1, 82);
        $this->assertTrue($result);

        /** ShopKit array * */
        $data['ShopKit_16'] = array(
            'instance' => 'ShopKit',
            'id' => 16,
            'quantity' => 5
        );

        /** Save to storage * */
        $this->object->setData($data);


        $result = (boolean) $this->object->getData('ShopKit', 16);
        $this->assertTrue($result);

        $result = (boolean) $this->object->getData(2, 16);
        $this->assertTrue($result);
    }

    /**
     * @covers Cart\DBStorage::setData
     * @todo   Implement testSetData().
     */
    public function testSetData() {
        $this->object->setData(NULL);

        /** Sproduct array * */
        $data["SProducts_71_82"] = array(
            'instance' => 'SProducts',
            'id' => 82,
            'quantity' => 5
        );

        /** Save to storage * */
        $result = $this->object->setData($data);
        $this->assertTrue($result);

        /** ShopKit array * */
        $data['ShopKit_16'] = array(
            'instance' => 'ShopKit',
            'id' => 16,
            'quantity' => 5
        );

        /** Save to storage * */
        $result = $this->object->setData($data);
        $this->assertTrue($result);

        /** Save to storage * */
        $result = $this->object->setData(NULL);
        $this->assertTrue($result);
    }

    /**
     * @covers Cart\DBStorage::remove
     * @todo   Implement testRemove().
     */
    public function testRemove() {
        /** Sproduct array * */
        $data["SProducts_71_82"] = array(
            'instance' => 'SProducts',
            'id' => 82,
            'quantity' => 5
        );
        /** ShopKit array * */
        $data['ShopKit_16'] = array(
            'instance' => 'ShopKit',
            'id' => 16,
            'quantity' => 5
        );

        /** Save to storage * */
        $this->object->setData($data);


        $result = $this->object->remove('SProducts', 82);
        $this->assertTrue($result);
        
        $result = $this->object->remove(1);
        $this->assertFalse($result);

        $result = $this->object->remove('ShopKit', 16);
        $this->assertTrue($result);

        $result = $this->object->remove(2);
        $this->assertFalse($result);

        $result = $this->object->remove();
        $this->assertFalse($result);
    }

}
