<?php

namespace Cart;

require_once realpath(dirname(__FILE__) . '/../../..') . '/enviroment.php';

doLogin();

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-13 at 13:12:44.
 */
class ApiTest extends \PHPUnit_Framework_TestCase {

    /**
     * Cart Api object
     * @var object 
     */
    protected $object;

    /**
     * CodeIgniter object
     * @var object 
     */
    protected $ci;

    /**
     * Error json of __call() method
     * @var json
     */
    protected $errorCallMethodResult;

    /**
     * Product variant id(first product from db)
     * @var int
     */
    protected $productVarId;

    /**
     * Kit id(first kit from db)
     * @var int
     */
    protected $kitId;

    /**
     * Success methods answer
     * @var json
     */
    protected $successAnswer;

    /**
     * Error message from addProductByVariantId() method
     * @var json
     */
    protected $errorAddProductByVarId;

    /**
     * Success message of get_kit_discount() method
     * @var json 
     */
    protected $successKitDiscount;

    /**
     * Error message of addKitById() method
     * @var json 
     */
    protected $errorAddKitById;

    /**
     * Message with zerro items count
     * @var json 
     */
    protected $zeroCountItemsAnswer;

    /**
     * Message with two items count
     * @var json 
     */
    protected $twoCountItemsAnswer;

    /**
     * Message with not valid price
     * @var json 
     */
    protected $notValidPriceAnswer;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        /** Getting cart Api object */
        $this->object = new \Cart\Api;

        /** Setting expected methods answers */
        $this->errorCallMethodResult = json_encode(array('success' => false, 'errors' => true, 'message' => 'Method not found.'));
        $this->successAnswer = json_encode(array('success' => true, 'errors' => false));
        $this->errorAddProductByVarId = json_encode(array('success' => false, 'errors' => true, 'message' => 'You have not specified item id.'));
        $this->errorAddKitById = json_encode(array('success' => false, 'errors' => true, 'message' => 'You have not specified item id.'));
        $this->successKitDiscount = json_encode(array('success' => true, 'errors' => false, 'data' => 0.00));
        $this->zeroCountItemsAnswer = json_encode(array('success' => true, 'errors' => false, 'data' => 0));
        $this->twoCountItemsAnswer = json_encode(array('success' => true, 'errors' => false, 'data' => 2));
        $this->notValidPriceAnswer = json_encode(array('success' => false, 'errors' => true, 'message' => 'Not valid price value.'));

        $this->ci = & get_instance();

        /** Get first product variant id from db */
        $product = $this->ci->db->limit(1)->get('shop_product_variants')->row_array();
        $this->productVarId = $product['id'];

        /** Get first kit id from db */
        $kit = $this->ci->db->limit(1)->get('shop_kit');
        if ($kit) {
            $kit = $kit->row_array();
            $this->kitId = $kit['id'];
        } else {
            $kit = 0;
        }
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers Cart\Api::create
     */
    public function testCreate() {
        /** Check correct type of object */
        $this->assertTrue($this->object->create() instanceof \Cart\Api);
    }

    /**
     * @covers Cart\Api::__call
     */
    public function test__call() {
        /** Check answer when method exists in cart Api class */
        $this->assertEquals(NULL, $this->object->__call('create'));

        /** Check answer when method not exists in cart Api class */
        $this->assertJsonStringEqualsJsonString($this->errorCallMethodResult, $this->object->__call('notExistingMethod'));
    }

    /**
     * @covers Cart\Api::index
     */
    public function testIndex() {
        // working        
    }

    /**
     * @covers Cart\Api::addProductByVariantId
     */
    public function testAddProductByVariantId() {
        /*         * Check success product adding */
        $this->assertJsonStringEqualsJsonString($this->successAnswer, $this->object->addProductByVariantId($this->productVarId));

        /*         * Check wrong product adding(without id) */
        $this->assertJsonStringEqualsJsonString($this->errorAddProductByVarId, $this->object->addProductByVariantId());
    }

    /**
     * @covers Cart\Api::addKit
     */
    public function testAddKit() {
        if ($this->kitId) {
            /*             * Check success kit adding */
            $this->assertJsonStringEqualsJsonString($this->successAnswer, $this->object->addKit($this->kitId));

            /*             * Check wrong kit adding(without id) */
            $this->assertJsonStringEqualsJsonString($this->errorAddProductByVarId, $this->object->addKit());
        } else {
            $this->markTestSkipped();
        }
    }

    /**
     * @covers Cart\Api::sync
     */
    public function testSync() {
        $result = (array) json_decode($this->object->sync());

        /** Check if sync() is success */
        $this->assertTrue($result['success']);
        $this->assertFalse($result['errors']);
        $this->assertTrue($result['data'] instanceof \stdClass);

        /** Check count of items in sync response */
        $this->assertGreaterThanOrEqual(1, count($result['data']->items));
    }

    /**
     * @covers Cart\Api::getAmountInCart
     */
    public function testGetAmountInCart() {
        /** Check answer when product id is correct */
        $this->assertEquals(1, $this->object->getAmountInCart('SProducts', $this->productVarId));

        /** Check answer when method is without parameters */
        $this->assertEquals(0, $this->object->getAmountInCart());

        /** Check answer when product id is wrong */
        $this->assertEquals(0, $this->object->getAmountInCart('SProducts', 99999));
    }

    /**
     * @covers Cart\Api::renderCart
     */
    public function testRenderCart() {

        /** Check output on render popup cart tpl */
        $this->expectOutputRegex('/id="popupCart"/');
        $this->object->renderCart();
    }

    /**
     * @covers Cart\Api::get_kit_discount
     */
    public function testGet_kit_discount() {
        /** Check on success answer*/
        $this->assertJsonStringEqualsJsonString($this->successKitDiscount, $this->object->get_kit_discount());
    }

    /**
     * @covers Cart\Api::getProductByVariantId
     */
    public function testGetProductByVariantId() {
        $result = (array) json_decode($this->object->getProductByVariantId($this->productVarId));

        /** Check on success answer*/
        $this->assertTrue($result['success']);
        $this->assertFalse($result['errors']);
        $this->assertTrue($result['data'] instanceof \stdClass);
        
        /** Check correct count of method answer */
        $this->assertEquals(1, count($result['data']));
        
        /** Check if returned instance is SProducts*/
        $this->assertEquals('SProducts', $result['data']->instance);
        $this->assertEquals($this->productVarId, $result['data']->id);
    }

    /**
     * @covers Cart\Api::getKit
     */
    public function testGetKit() {
        $result = (array) json_decode($this->object->getKit($this->kitId));

        $this->assertTrue($result['success']);
        $this->assertFalse($result['errors']);
        $this->assertTrue($result['data'] instanceof \stdClass);
        $this->assertGreaterThanOrEqual(1, count($result['data']));
        $this->assertEquals('ShopKit', $result['data']->instance);
        $this->assertEquals($this->kitId, $result['data']->id);
    }

    /**
     * @covers Cart\Api::removeKit
     */
    public function testRemoveKit() {
        $this->assertJsonStringEqualsJsonString($this->successAnswer, $this->object->removeKit($this->kitId));
        $this->assertJsonStringEqualsJsonString($this->errorAddKitById, $this->object->removeKit());
    }

    /**
     * @covers Cart\Api::removeProductByVariantId
     * @todo   Implement testRemoveProductByVariantId().
     */
    public function testRemoveProductByVariantId() {
        $this->assertJsonStringEqualsJsonString($this->successAnswer, $this->object->removeProductByVariantId($this->productVarId));
        $this->assertJsonStringEqualsJsonString($this->errorAddProductByVarId, $this->object->removeProductByVariantId());
    }

    /**
     * @covers Cart\Api::removeAll
     */
    public function testRemoveAll() {
        $this->assertJsonStringEqualsJsonString($this->successAnswer, $this->object->removeAll());
    }

    /**
     * @covers Cart\Api::getTotalItemsCount
     */
    public function testGetTotalItemsCount() {
        $this->assertJsonStringEqualsJsonString($this->zeroCountItemsAnswer, $this->object->getTotalItemsCount());

        $this->object->addProductByVariantId($this->productVarId);
        $this->object->addKit($this->kitId);

        $this->assertJsonStringEqualsJsonString($this->twoCountItemsAnswer, $this->object->getTotalItemsCount());
    }

    /**
     * @covers Cart\Api::getPrice
     */
    public function testGetPrice() {
        $result = (array) json_decode($this->object->getPrice());

        $this->assertTrue($result['success']);
        $this->assertFalse($result['errors']);
        $this->assertTrue(is_numeric($result['data']));
    }

    /**
     * @covers Cart\Api::getOriginPrice
     */
    public function testGetOriginPrice() {
        $result = (array) json_decode($this->object->getOriginPrice());

        $this->assertTrue($result['success']);
        $this->assertFalse($result['errors']);
        $this->assertTrue(is_numeric($result['data']));
    }

    /**
     * @covers Cart\Api::setTotalPrice
     */
    public function testSetTotalPrice() {
        $this->assertJsonStringEqualsJsonString($this->successAnswer, $this->object->setTotalPrice(1000));

        $result = (array) json_decode($this->object->getPrice());

        $this->assertTrue($result['success']);
        $this->assertFalse($result['errors']);
        $this->assertTrue(is_numeric($result['data']));
        $this->assertEquals(1000, $result['data']);

        $this->assertJsonStringEqualsJsonString($this->notValidPriceAnswer, $this->object->setTotalPrice());
    }

    /**
     * @covers Cart\Api::getData
     */
    public function testGetData() {
        $result = (array) json_decode($this->object->getData());

        $this->assertTrue($result['success']);
        $this->assertFalse($result['errors']);
        $this->assertCount(2, $result['data']);
    }

}
