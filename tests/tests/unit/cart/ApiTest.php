<?php

namespace Cart;

require_once realpath(dirname(__FILE__) . '/../../..') . '/enviroment.php';

doLogin();

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-13 at 13:12:44.
 */
class ApiTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Api
     */
    protected $object;
    protected $errorCallMethodResult;
    protected $ci;
    protected $productVarId;
    protected $kitId;
    protected $successAnswer;
    protected $errorAddProductByVarId;
    protected $successKitDiscount;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new \Cart\Api;
        $this->errorCallMethodResult = json_encode(array('success' => false, 'errors' => true, 'message' => 'Method not found.'));
        $this->successAnswer = json_encode(array('success' => true, 'errors' => false));
        $this->errorAddProductByVarId = json_encode(array('success' => false, 'errors' => true, 'message' => 'You have not specified item id.'));
        $this->successKitDiscount = json_encode(array('success' => true, 'errors' => false, 'data' => 0.00));

        $this->ci = & get_instance();
        $product = $this->ci->db->limit(1)->get('shop_product_variants')->row_array();
        $this->productVarId = $product['id'];

        $kit = $this->ci->db->limit(1)->get('shop_kit');
        if ($kit) {
            $kit = $kit->row_array();
            $this->kitId = $kit['id'];
        } else {
            $kit = 0;
        }
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers Cart\Api::create
     * @todo   Implement testCreate().
     */
    public function testCreate() {
        $this->assertTrue($this->object->create() instanceof \Cart\Api);
    }

    /**
     * @covers Cart\Api::__call
     * @todo   Implement test__call().
     */
    public function test__call() {
        $this->assertEquals(NULL, $this->object->__call('create'));
        $this->assertJsonStringEqualsJsonString($this->errorCallMethodResult, $this->object->__call('notExistingMethod'));
    }

    /**
     * @covers Cart\Api::index
     * @todo   Implement testIndex().
     */
    public function testIndex() {
        // working        
    }

    /**
     * @covers Cart\Api::addProductByVariantId
     * @todo   Implement testAddProductByVariantId().
     */
    public function testAddProductByVariantId() {
        $this->assertJsonStringEqualsJsonString($this->successAnswer, $this->object->addProductByVariantId($this->productVarId));
        $this->assertJsonStringEqualsJsonString($this->errorAddProductByVarId, $this->object->addProductByVariantId());
    }

    /**
     * @covers Cart\Api::addKit
     * @todo   Implement testAddKit().
     */
    public function testAddKit() {
        if ($this->kitId) {
            $this->assertJsonStringEqualsJsonString($this->successAnswer, $this->object->addKit($this->kitId));
            $this->assertJsonStringEqualsJsonString($this->errorAddProductByVarId, $this->object->addKit());
        } else {
            $this->markTestSkipped();
        }
    }

    /**
     * @covers Cart\Api::sync
     * @todo   Implement testSync().
     */
    public function testSync() {
        $result = (array) json_decode($this->object->sync());
        $this->assertTrue($result['success']);
        $this->assertFalse($result['errors']);
        $this->assertTrue($result['data'] instanceof \stdClass);
        $this->assertGreaterThanOrEqual(1, count($result['data']->items));
    }

    /**
     * @covers Cart\Api::getAmountInCart
     * @todo   Implement testGetAmountInCart().
     */
    public function testGetAmountInCart() {
        $this->assertGreaterThanOrEqual(1, $this->object->getAmountInCart('SProducts', $this->productVarId));
        $this->assertEquals(0, $this->object->getAmountInCart());
        $this->assertEquals(0, $this->object->getAmountInCart('SProducts', 99999));
    }

    /**
     * @covers Cart\Api::renderCart
     * @todo   Implement testRenderCart().
     */
    public function testRenderCart() {
        $this->expectOutputRegex('/id="popupCart"/');
        $this->object->renderCart();
    }

    /**
     * @covers Cart\Api::get_kit_discount
     * @todo   Implement testGet_kit_discount().
     */
    public function testGet_kit_discount() {
        $this->assertJsonStringEqualsJsonString($this->successKitDiscount, $this->object->get_kit_discount());
    }

    /**
     * @covers Cart\Api::getProductByVariantId
     * @todo   Implement testGetProductByVariantId().
     */
    public function testGetProductByVariantId() {
        $result = (array) json_decode($this->object->getProductByVariantId($this->productVarId));

        $this->assertTrue($result['success']);
        $this->assertFalse($result['errors']);
        $this->assertTrue($result['data'] instanceof \stdClass);
        $this->assertGreaterThanOrEqual(1, count($result['data']));
        $this->assertEquals('SProducts', $result['data']->instance);
        $this->assertEquals($this->productVarId, $result['data']->id);
    }

    /**
     * @covers Cart\Api::getKit
     * @todo   Implement testGetKit().
     */
    public function testGetKit() {
        $result = (array) json_decode($this->object->getKit($this->kitId));

        $this->assertTrue($result['success']);
        $this->assertFalse($result['errors']);
        $this->assertTrue($result['data'] instanceof \stdClass);
        $this->assertGreaterThanOrEqual(1, count($result['data']));
        $this->assertEquals('ShopKit', $result['data']->instance);
        $this->assertEquals($this->kitId, $result['data']->id);
        
    }

    /**
     * @covers Cart\Api::removeKit
     * @todo   Implement testRemoveKit().
     */
    public function testRemoveKit() {
        $this->assertJsonStringEqualsJsonString($this->successAnswer, $this->object->removeKit($this->kitId));
    }

    /**
     * @covers Cart\Api::removeProductByVariantId
     * @todo   Implement testRemoveProductByVariantId().
     */
    public function testRemoveProductByVariantId() {
       
    }

    /**
     * @covers Cart\Api::removeAll
     * @todo   Implement testRemoveAll().
     */
    public function testRemoveAll() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Cart\Api::getTotalItemsCount
     * @todo   Implement testGetTotalItemsCount().
     */
    public function testGetTotalItemsCount() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Cart\Api::getPrice
     * @todo   Implement testGetPrice().
     */
    public function testGetPrice() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Cart\Api::getOriginPrice
     * @todo   Implement testGetOriginPrice().
     */
    public function testGetOriginPrice() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Cart\Api::setTotalPrice
     * @todo   Implement testSetTotalPrice().
     */
    public function testSetTotalPrice() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Cart\Api::getData
     * @todo   Implement testGetData().
     */
    public function testGetData() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}
