<?php

namespace wishlist\classes;

require_once realpath(dirname(__FILE__) . '/../..') . '/enviroment.php';

doLogin();
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-06-28 at 11:26:12.
 */
class BaseApiTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var BaseApi
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new BaseApi;
        $this->object->_deinstall();
        $this->object->_install();
        $_POST = array(
                    'wishlist' => 1, 
                    'wishListName'=>"list", 
                    'listItem'=> array(31,24), 
                    'user_id'=>$GLOBALS['userId']
                );
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }
    
    /**
     * @covers wishlist\classes\BaseApi::_addItem
     * @todo   Implement test_addItem().
     * @dataProvider _addItem_provider
     */
    public function test_addItem($var_id) {
        $result = $this->object->_addItem($var_id);
        $this->assertNotEmpty($result);
        
        $this->assertInternalType('string', $result);
        
        $this->assertRegExp('/Добавлено/', $result);
        
    }
    
     public function _addItem_provider() {
        return array(
            array(1),
            array(2),
            array(3)                               
        );
    }
    
    /**
     * @covers wishlist\classes\BaseApi::moveItem
     * @todo   Implement testMoveItem().
     * @dataProvider moveItem_provider
     */
//    public function testMoveItem($var_id, $wish_list_id) {
//        
//        $this->assertNotEmpty($this->object->moveItem($var_id, $wish_list_id));
//        
//        $this->assertInternalType('string', $this->object->moveItem($var_id, $wish_list_id));
//        
//        $this->assertEquals('Операция успешна', $this->object->moveItem($var_id, $wish_list_id));
//       
//    }
//    
//     public function moveItem_provider() {
//        return array(
//            array(1, 10),
//            array(2, 11),
//            array(3, 1)                   
//        );
//    }

    /**
     * @covers wishlist\classes\BaseApi::all
     * @todo   Implement testAll().
     */
//    public function testAll() {
//        
//        $this->assertNotEmpty($this->object->all());
//        
//        $this->assertInternalType('array', $this->object->all());
//        
//    }
//
//    
//
//    
//
//    /**
//     * @covers wishlist\classes\BaseApi::deleteItem
//     * @todo   Implement testDeleteItem().
//     * @dataProvider moveItem_provider
//     */
////    public function testDeleteItem($var_id, $wish_list_id) {
////        $this->assertNotEmpty($this->object->deleteItem($var_id, $wish_list_id));
////        
////        $this->assertInternalType('string', $this->object->deleteItem($var_id, $wish_list_id));
////        
////        $this->assertRegExp('/Операция успешна/', $this->object->deleteItem($var_id, $wish_list_id));
////       
////        
////    }
////
////    /**
////     * @covers wishlist\classes\BaseApi::deleteItemByIds
////     * @todo   Implement testDeleteItemByIds().
////     */
////    public function testDeleteItemByIds() {
////        $this->assertNotEmpty($this->object->deleteItemByIds());
////        
////        $this->assertInternalType('string', $this->object->deleteItemByIds());
////        
////        $this->assertRegExp('/Успешно удалено/', $this->object->deleteItemByIds());
////        
////    }
//
//    /**
//     * @covers wishlist\classes\BaseApi::show
//     * @todo   Implement testShow().
//     */
//    public function testShow() {
//
//        $this->assertNotEmpty($this->object->show('dd89d3ab8d89e71952e383b0ccd3a98d'));
//        
//        $this->assertInternalType('array', $this->object->show('dd89d3ab8d89e71952e383b0ccd3a98d'));
//        
//        $this->assertCount(1, $this->object->show('dd89d3ab8d89e71952e383b0ccd3a98d'));
//        
//    }
//
//    /**
//     * @covers wishlist\classes\BaseApi::getMostViewedWishLists
//     * @todo   Implement testGetMostViewedWishLists().
//     */
//    public function testGetMostViewedWishLists() {
//       
//        $this->assertNotEmpty($this->object->getMostViewedWishLists());
//        
//        $this->assertInternalType('array', $this->object->getMostViewedWishLists());
//        
//        $this->assertGreaterThan(0, $this->object->getMostViewedWishLists());
//    }
//
//    /**
//     * @covers wishlist\classes\BaseApi::user
//     * @todo   Implement testUser().
//     */
//    public function testUser() {
//        
//        $this->assertNotEmpty($this->object->user($GLOBALS['userId']));
//        
//        $this->assertInternalType('array', $this->object->user($GLOBALS['userId']));
//        
//        $this->assertGreaterThan(0, $this->object->user($GLOBALS['userId']));
//    }
//
//    /**
//     * @covers wishlist\classes\BaseApi::userUpdate
//     * @todo   Implement testUserUpdate().
//     */
//    public function testUserUpdate() {
//        
//        
//    }
//
//    /**
//     * @covers wishlist\classes\BaseApi::getMostPopularItems
//     * @todo   Implement testGetMostPopularItems().
//     */
//    public function testGetMostPopularItems() {
//        
//        $this->assertNotEmpty($this->object->getMostPopularItems());
//        
//        $this->assertInternalType('array', $this->object->getMostPopularItems());
//        
//        $this->assertGreaterThan(0, $this->object->getMostPopularItems());
//    }
//
//    /**
//     * @covers wishlist\classes\BaseApi::createWishList
//     * @todo   Implement testCreateWishList().
//     */
//    public function testCreateWishList() {
//        $this->assertNotEmpty($this->object->createWishList());
//        
//        $this->assertInternalType('string', $this->object->createWishList());
//        
//        $this->assertRegExp('/Создано/', $this->object->createWishList());
//       
//    }
//
//    /**
//     * @covers wishlist\classes\BaseApi::deleteWL
//     * @todo   Implement testDeleteWL().
//     */
//    public function testDeleteWL() {
//        // Remove the following lines when you implement this test.
//        $this->markTestIncomplete(
//                'This test has not been implemented yet.'
//        );
//    }
//
//    /**
//     * @covers wishlist\classes\BaseApi::updateWL
//     * @todo   Implement testUpdateWL().
//     */
//    public function testUpdateWL() {
//        // Remove the following lines when you implement this test.
//        $this->markTestIncomplete(
//                'This test has not been implemented yet.'
//        );
//    }
//
//    /**
//     * @covers wishlist\classes\BaseApi::deleteImage
//     * @todo   Implement testDeleteImage().
//     */
//    public function testDeleteImage() {
//        // Remove the following lines when you implement this test.
//        $this->markTestIncomplete(
//                'This test has not been implemented yet.'
//        );
//    }
//
//    /**
//     * @covers wishlist\classes\BaseApi::do_upload
//     * @todo   Implement testDo_upload().
//     */
//    public function testDo_upload() {
//        // Remove the following lines when you implement this test.
//        $this->markTestIncomplete(
//                'This test has not been implemented yet.'
//        );
//    }
//
//    /**
//     * @covers wishlist\classes\BaseApi::renderPopup
//     * @todo   Implement testRenderPopup().
//     */
//    public function testRenderPopup() {
//        $this->assertNotEmpty($this->object->renderPopup());
//        
//        $this->assertInternalType('array', $this->object->renderPopup());
//    }

}
