<?php

$I = new AcceptanceTester($scenario);
initTest::login($I);
$I->amOnPage('/');
$I->waitForText('Заказать звонок');
$I->click(CallbacksPage::$OrderCallButton);
$I->waitForElement(CallbacksPage::$CallMeButton);
$I->fillField(CallbacksPage::$UserNameCreate, 'qwert12345!@#$%^&*()_+|}{:?></.,;[]`йцуке');
$I->fillField(CallbacksPage::$TelephoneCreate, 'qwert12345!@#$%^&*()_+|}{:?></.,;[]`йцуке');
$I->fillField(CallbacksPage::$CommentCreate, 'qwert12345!@#$%^&*()_+|}{:?></.,;[]`йцуке');
$I->click(CallbacksPage::$CallMeButton);
$I->waitForElement('.//*[@id="data-callback"]/label[2]/span[2]/label');
$I->see('Поле Телефон должно содержать только цифры.', './/*[@id="data-callback"]/label[2]/span[2]/label');
$I->fillField(CallbacksPage::$TelephoneCreate, 'qwert1');
$I->click(CallbacksPage::$CallMeButton);
$I->waitForElement('.//*[@id="data-callback"]/label[2]/span[2]/label');
$I->see('Поле Телефон должно содержать только цифры.', './/*[@id="data-callback"]/label[2]/span[2]/label');
$I->fillField(CallbacksPage::$TelephoneCreate, '2345!@#$%^&*()_+|}{');
$I->click(CallbacksPage::$CallMeButton);
$I->waitForElement('.//*[@id="data-callback"]/label[2]/span[2]/label');
$I->see('Поле Телефон должно содержать только цифры.', './/*[@id="data-callback"]/label[2]/span[2]/label');
$I->fillField(CallbacksPage::$TelephoneCreate, '65йцуке');
$I->click(CallbacksPage::$CallMeButton);
$I->waitForElement('.//*[@id="data-callback"]/label[2]/span[2]/label');
$I->see('Поле Телефон должно содержать только цифры.', './/*[@id="data-callback"]/label[2]/span[2]/label');
$I->fillField(CallbacksPage::$TelephoneCreate, '12345');
$I->click(CallbacksPage::$CallMeButton);
$I->waitForElement('div.text-el>h1');
$povid=$I->grabTextFrom('div.text-el>h1');
$pov=$I->grabTextFrom('div.text-el>div');
$I->waitForElementNotVisible('.//*[@id="ordercall"]');
$I->amOnPage('/admin');
$I->click('html/body/div[1]/div[3]/div/nav/ul/li[8]/a');
$I->click('html/body/div[1]/div[3]/div/nav/ul/li[8]/ul/li[1]/a');
$I->waitForText('Настройки магазина');
$I->click('.//*[@id="mainContent"]/section/div[2]/div[1]/ul/li[4]/a');
$I->waitForElement('//*[@id="notif"]/table/thead/tr/th');
//$povid1=$I->grabTextFrom(".//*[@id='notif']/table/tbody/tr/td/div/div[2]/div/div/div[2]/textarea");
//$I->comment("$povid1");
//$pov1=$I->grabTextFrom('.//*[@id="notif"]/table/tbody/tr/td/div/div[2]/div/div/div[2]/textarea/div');
//$I->assertEquals($povid, $povid1);
//$I->assertEquals($pov, $pov1);
$I->executeJS("var container = document.createElement('input');
 container.id = 'grabfromh1';
        container.type = 'hidden';
 container.value = window.frames[1].document.body.getElementsByTagName('h1')[0].innerHTML+'_'+window.frames[1].document.body.getElementsByTagName('div')[0].innerHTML;
 document.body.insertBefore(container, document.body.firstChild)");
$I->wait("1");
$text = $I->grabValueFrom('#grabfromh1');
$text = explode("_", $text);
//$text = $I->grabTextFrom("window.frames[1].document.body.getElementsByTagName('h1').value");
$I->comment("$text[0]"."$text[1]");
$I->assertEquals($povid, $text[0]);
$I->assertEquals($pov, $text[1]);